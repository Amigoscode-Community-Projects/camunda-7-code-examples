/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.16.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.camunda.consulting.openapi.client.handler;

import com.camunda.consulting.openapi.client.model.CountResultDto;
import com.camunda.consulting.openapi.client.model.CreateIncidentDto;
import com.camunda.consulting.openapi.client.model.EventSubscriptionDto;
import com.camunda.consulting.openapi.client.model.ExceptionDto;
import com.camunda.consulting.openapi.client.model.ExecutionDto;
import com.camunda.consulting.openapi.client.model.ExecutionQueryDto;
import com.camunda.consulting.openapi.client.model.ExecutionTriggerDto;
import java.io.File;
import com.camunda.consulting.openapi.client.model.IncidentDto;
import com.camunda.consulting.openapi.client.model.PatchVariablesDto;
import com.camunda.consulting.openapi.client.model.VariableValueDto;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ExecutionApi
 */
@Ignore
public class ExecutionApiTest {

    private final ExecutionApi api = new ExecutionApi();

    
    /**
     * Create Incident
     *
     * Creates a custom incident with given properties.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createIncidentTest() {
        String id = null;
        CreateIncidentDto createIncidentDto = null;
        IncidentDto response = api.createIncident(id, createIncidentDto);

        // TODO: test validations
    }
    
    /**
     * Delete Local Execution Variable
     *
     * Deletes a variable in the context of a given execution by id. Deletion does not propagate upwards in the execution hierarchy.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteLocalExecutionVariableTest() {
        String id = null;
        String varName = null;
        api.deleteLocalExecutionVariable(id, varName);

        // TODO: test validations
    }
    
    /**
     * Get Execution
     *
     * Retrieves an execution by id, according to the &#x60;Execution&#x60; interface in the engine.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getExecutionTest() {
        String id = null;
        ExecutionDto response = api.getExecution(id);

        // TODO: test validations
    }
    
    /**
     * Get Executions
     *
     * Queries for the executions that fulfill given parameters. Parameters may be static as well as dynamic runtime properties of executions. The size of the result set can be retrieved by using the [Get Execution Count](https://docs.camunda.org/manual/7.16/reference/rest/execution/get-query-count/) method.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getExecutionsTest() {
        String businessKey = null;
        String processDefinitionId = null;
        String processDefinitionKey = null;
        String processInstanceId = null;
        String activityId = null;
        String signalEventSubscriptionName = null;
        String messageEventSubscriptionName = null;
        Boolean active = null;
        Boolean suspended = null;
        String incidentId = null;
        String incidentType = null;
        String incidentMessage = null;
        String incidentMessageLike = null;
        String tenantIdIn = null;
        String variables = null;
        String processVariables = null;
        Boolean variableNamesIgnoreCase = null;
        Boolean variableValuesIgnoreCase = null;
        String sortBy = null;
        String sortOrder = null;
        Integer firstResult = null;
        Integer maxResults = null;
        List<ExecutionDto> response = api.getExecutions(businessKey, processDefinitionId, processDefinitionKey, processInstanceId, activityId, signalEventSubscriptionName, messageEventSubscriptionName, active, suspended, incidentId, incidentType, incidentMessage, incidentMessageLike, tenantIdIn, variables, processVariables, variableNamesIgnoreCase, variableValuesIgnoreCase, sortBy, sortOrder, firstResult, maxResults);

        // TODO: test validations
    }
    
    /**
     * Get Execution Count
     *
     * Queries for the number of executions that fulfill given parameters. Takes the same parameters as the [Get Executions](https://docs.camunda.org/manual/7.16/reference/rest/execution/get-query/) method.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getExecutionsCountTest() {
        String businessKey = null;
        String processDefinitionId = null;
        String processDefinitionKey = null;
        String processInstanceId = null;
        String activityId = null;
        String signalEventSubscriptionName = null;
        String messageEventSubscriptionName = null;
        Boolean active = null;
        Boolean suspended = null;
        String incidentId = null;
        String incidentType = null;
        String incidentMessage = null;
        String incidentMessageLike = null;
        String tenantIdIn = null;
        String variables = null;
        String processVariables = null;
        Boolean variableNamesIgnoreCase = null;
        Boolean variableValuesIgnoreCase = null;
        CountResultDto response = api.getExecutionsCount(businessKey, processDefinitionId, processDefinitionKey, processInstanceId, activityId, signalEventSubscriptionName, messageEventSubscriptionName, active, suspended, incidentId, incidentType, incidentMessage, incidentMessageLike, tenantIdIn, variables, processVariables, variableNamesIgnoreCase, variableValuesIgnoreCase);

        // TODO: test validations
    }
    
    /**
     * Get Local Execution Variable
     *
     * Retrieves a variable from the context of a given execution by id. Does not traverse the parent execution hierarchy.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLocalExecutionVariableTest() {
        String id = null;
        String varName = null;
        Boolean deserializeValue = null;
        VariableValueDto response = api.getLocalExecutionVariable(id, varName, deserializeValue);

        // TODO: test validations
    }
    
    /**
     * Get Local Execution Variable (Binary)
     *
     * Retrieves a binary variable from the context of a given execution by id. Does not traverse the parent execution hierarchy. Applicable for byte array and file variables.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLocalExecutionVariableBinaryTest() {
        String id = null;
        String varName = null;
        File response = api.getLocalExecutionVariableBinary(id, varName);

        // TODO: test validations
    }
    
    /**
     * Get Local Execution Variables
     *
     * Retrieves all variables of a given execution by id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLocalExecutionVariablesTest() {
        String id = null;
        Boolean deserializeValues = null;
        Map<String, VariableValueDto> response = api.getLocalExecutionVariables(id, deserializeValues);

        // TODO: test validations
    }
    
    /**
     * Get Message Event Subscription
     *
     * Retrieves a message event subscription for a given execution by id and a message name.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMessageEventSubscriptionTest() {
        String id = null;
        String messageName = null;
        EventSubscriptionDto response = api.getMessageEventSubscription(id, messageName);

        // TODO: test validations
    }
    
    /**
     * Update/Delete Local Execution Variables
     *
     * Updates or deletes the variables in the context of an execution by id. The updates do not propagate upwards in the execution hierarchy. Updates precede deletions. So, if a variable is updated AND deleted, the deletion overrides the update.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void modifyLocalExecutionVariablesTest() {
        String id = null;
        PatchVariablesDto patchVariablesDto = null;
        api.modifyLocalExecutionVariables(id, patchVariablesDto);

        // TODO: test validations
    }
    
    /**
     * Put Local Execution Variable
     *
     * Sets a variable in the context of a given execution by id. Update does not propagate upwards in the execution hierarchy.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void putLocalExecutionVariableTest() {
        String id = null;
        String varName = null;
        VariableValueDto variableValueDto = null;
        api.putLocalExecutionVariable(id, varName, variableValueDto);

        // TODO: test validations
    }
    
    /**
     * Get Executions (POST)
     *
     * Queries for executions that fulfill given parameters through a JSON object. This method is slightly more powerful than the [Get Executions](https://docs.camunda.org/manual/7.16/reference/rest/execution/get-query/) method because it allows to filter by multiple instance and execution variables of types &#x60;String&#x60;, &#x60;Number&#x60; or &#x60;Boolean&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void queryExecutionsTest() {
        Integer firstResult = null;
        Integer maxResults = null;
        ExecutionQueryDto executionQueryDto = null;
        List<ExecutionDto> response = api.queryExecutions(firstResult, maxResults, executionQueryDto);

        // TODO: test validations
    }
    
    /**
     * Get Execution Count (POST)
     *
     * Queries for the number of executions that fulfill given parameters. This method takes the same message body as the [Get Executions POST](https://docs.camunda.org/manual/7.16/reference/rest/execution/post-query/) method and therefore it is slightly more powerful than the [Get Execution Count](https://docs.camunda.org/manual/7.16/reference/rest/execution/get-query-count/) method.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void queryExecutionsCountTest() {
        ExecutionQueryDto executionQueryDto = null;
        CountResultDto response = api.queryExecutionsCount(executionQueryDto);

        // TODO: test validations
    }
    
    /**
     * Post Local Execution Variable (Binary)
     *
     * Sets the serialized value for a binary variable or the binary value for a file variable in the context of a given execution by id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setLocalExecutionVariableBinaryTest() {
        String id = null;
        String varName = null;
        File data = null;
        String valueType = null;
        api.setLocalExecutionVariableBinary(id, varName, data, valueType);

        // TODO: test validations
    }
    
    /**
     * Trigger Execution
     *
     * Signals an execution by id. Can for example be used to explicitly skip user tasks or signal asynchronous continuations.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void signalExecutionTest() {
        String id = null;
        ExecutionTriggerDto executionTriggerDto = null;
        api.signalExecution(id, executionTriggerDto);

        // TODO: test validations
    }
    
    /**
     * Trigger Message Event Subscription
     *
     * Delivers a message to a specific execution by id, to trigger an existing message event subscription. Inject process variables as the message&#39;s payload.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void triggerEventTest() {
        String id = null;
        String messageName = null;
        ExecutionTriggerDto executionTriggerDto = null;
        api.triggerEvent(id, messageName, executionTriggerDto);

        // TODO: test validations
    }
    
}
