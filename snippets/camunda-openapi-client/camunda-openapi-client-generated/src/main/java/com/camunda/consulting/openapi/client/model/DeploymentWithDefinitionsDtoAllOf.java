/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.16.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.camunda.consulting.openapi.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.camunda.consulting.openapi.client.model.CaseDefinitionDto;
import com.camunda.consulting.openapi.client.model.DecisionDefinitionDto;
import com.camunda.consulting.openapi.client.model.DecisionRequirementsDefinitionDto;
import com.camunda.consulting.openapi.client.model.ProcessDefinitionDto;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * DeploymentWithDefinitionsDtoAllOf
 */
@JsonPropertyOrder({
  DeploymentWithDefinitionsDtoAllOf.JSON_PROPERTY_DEPLOYED_PROCESS_DEFINITIONS,
  DeploymentWithDefinitionsDtoAllOf.JSON_PROPERTY_DEPLOYED_DECISION_DEFINITIONS,
  DeploymentWithDefinitionsDtoAllOf.JSON_PROPERTY_DEPLOYED_DECISION_REQUIREMENTS_DEFINITIONS,
  DeploymentWithDefinitionsDtoAllOf.JSON_PROPERTY_DEPLOYED_CASE_DEFINITIONS
})
@JsonTypeName("DeploymentWithDefinitionsDto_allOf")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-10-13T16:56:52.297572+02:00[Europe/Berlin]")
public class DeploymentWithDefinitionsDtoAllOf {
  public static final String JSON_PROPERTY_DEPLOYED_PROCESS_DEFINITIONS = "deployedProcessDefinitions";
  private JsonNullable<Map<String, ProcessDefinitionDto>> deployedProcessDefinitions = JsonNullable.<Map<String, ProcessDefinitionDto>>undefined();

  public static final String JSON_PROPERTY_DEPLOYED_DECISION_DEFINITIONS = "deployedDecisionDefinitions";
  private JsonNullable<Map<String, DecisionDefinitionDto>> deployedDecisionDefinitions = JsonNullable.<Map<String, DecisionDefinitionDto>>undefined();

  public static final String JSON_PROPERTY_DEPLOYED_DECISION_REQUIREMENTS_DEFINITIONS = "deployedDecisionRequirementsDefinitions";
  private JsonNullable<Map<String, DecisionRequirementsDefinitionDto>> deployedDecisionRequirementsDefinitions = JsonNullable.<Map<String, DecisionRequirementsDefinitionDto>>undefined();

  public static final String JSON_PROPERTY_DEPLOYED_CASE_DEFINITIONS = "deployedCaseDefinitions";
  private JsonNullable<Map<String, CaseDefinitionDto>> deployedCaseDefinitions = JsonNullable.<Map<String, CaseDefinitionDto>>undefined();


  public DeploymentWithDefinitionsDtoAllOf deployedProcessDefinitions(Map<String, ProcessDefinitionDto> deployedProcessDefinitions) {
    this.deployedProcessDefinitions = JsonNullable.<Map<String, ProcessDefinitionDto>>of(deployedProcessDefinitions);
    
    return this;
  }

  public DeploymentWithDefinitionsDtoAllOf putDeployedProcessDefinitionsItem(String key, ProcessDefinitionDto deployedProcessDefinitionsItem) {
    if (this.deployedProcessDefinitions == null || !this.deployedProcessDefinitions.isPresent()) {
      this.deployedProcessDefinitions = JsonNullable.<Map<String, ProcessDefinitionDto>>of(new HashMap<>());
    }
    try {
      this.deployedProcessDefinitions.get().put(key, deployedProcessDefinitionsItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

   /**
   * A JSON Object containing a property for each of the process definitions, which are successfully deployed with that deployment. The key is the process definition id, the value is a JSON Object corresponding to the process definition.
   * @return deployedProcessDefinitions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A JSON Object containing a property for each of the process definitions, which are successfully deployed with that deployment. The key is the process definition id, the value is a JSON Object corresponding to the process definition.")
  @JsonIgnore

  public Map<String, ProcessDefinitionDto> getDeployedProcessDefinitions() {
        return deployedProcessDefinitions.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_DEPLOYED_PROCESS_DEFINITIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Map<String, ProcessDefinitionDto>> getDeployedProcessDefinitions_JsonNullable() {
    return deployedProcessDefinitions;
  }
  
  @JsonProperty(JSON_PROPERTY_DEPLOYED_PROCESS_DEFINITIONS)
  public void setDeployedProcessDefinitions_JsonNullable(JsonNullable<Map<String, ProcessDefinitionDto>> deployedProcessDefinitions) {
    this.deployedProcessDefinitions = deployedProcessDefinitions;
  }

  public void setDeployedProcessDefinitions(Map<String, ProcessDefinitionDto> deployedProcessDefinitions) {
    this.deployedProcessDefinitions = JsonNullable.<Map<String, ProcessDefinitionDto>>of(deployedProcessDefinitions);
  }


  public DeploymentWithDefinitionsDtoAllOf deployedDecisionDefinitions(Map<String, DecisionDefinitionDto> deployedDecisionDefinitions) {
    this.deployedDecisionDefinitions = JsonNullable.<Map<String, DecisionDefinitionDto>>of(deployedDecisionDefinitions);
    
    return this;
  }

  public DeploymentWithDefinitionsDtoAllOf putDeployedDecisionDefinitionsItem(String key, DecisionDefinitionDto deployedDecisionDefinitionsItem) {
    if (this.deployedDecisionDefinitions == null || !this.deployedDecisionDefinitions.isPresent()) {
      this.deployedDecisionDefinitions = JsonNullable.<Map<String, DecisionDefinitionDto>>of(new HashMap<>());
    }
    try {
      this.deployedDecisionDefinitions.get().put(key, deployedDecisionDefinitionsItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

   /**
   * A JSON Object containing a property for each of the decision definitions, which are successfully deployed with that deployment. The key is the decision definition id, the value is a JSON Object corresponding to the decision definition.
   * @return deployedDecisionDefinitions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A JSON Object containing a property for each of the decision definitions, which are successfully deployed with that deployment. The key is the decision definition id, the value is a JSON Object corresponding to the decision definition.")
  @JsonIgnore

  public Map<String, DecisionDefinitionDto> getDeployedDecisionDefinitions() {
        return deployedDecisionDefinitions.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_DEPLOYED_DECISION_DEFINITIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Map<String, DecisionDefinitionDto>> getDeployedDecisionDefinitions_JsonNullable() {
    return deployedDecisionDefinitions;
  }
  
  @JsonProperty(JSON_PROPERTY_DEPLOYED_DECISION_DEFINITIONS)
  public void setDeployedDecisionDefinitions_JsonNullable(JsonNullable<Map<String, DecisionDefinitionDto>> deployedDecisionDefinitions) {
    this.deployedDecisionDefinitions = deployedDecisionDefinitions;
  }

  public void setDeployedDecisionDefinitions(Map<String, DecisionDefinitionDto> deployedDecisionDefinitions) {
    this.deployedDecisionDefinitions = JsonNullable.<Map<String, DecisionDefinitionDto>>of(deployedDecisionDefinitions);
  }


  public DeploymentWithDefinitionsDtoAllOf deployedDecisionRequirementsDefinitions(Map<String, DecisionRequirementsDefinitionDto> deployedDecisionRequirementsDefinitions) {
    this.deployedDecisionRequirementsDefinitions = JsonNullable.<Map<String, DecisionRequirementsDefinitionDto>>of(deployedDecisionRequirementsDefinitions);
    
    return this;
  }

  public DeploymentWithDefinitionsDtoAllOf putDeployedDecisionRequirementsDefinitionsItem(String key, DecisionRequirementsDefinitionDto deployedDecisionRequirementsDefinitionsItem) {
    if (this.deployedDecisionRequirementsDefinitions == null || !this.deployedDecisionRequirementsDefinitions.isPresent()) {
      this.deployedDecisionRequirementsDefinitions = JsonNullable.<Map<String, DecisionRequirementsDefinitionDto>>of(new HashMap<>());
    }
    try {
      this.deployedDecisionRequirementsDefinitions.get().put(key, deployedDecisionRequirementsDefinitionsItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

   /**
   * A JSON Object containing a property for each of the decision requirements definitions, which are successfully deployed with that deployment. The key is the decision requirements definition id, the value is a JSON Object corresponding to the decision requirements definition.
   * @return deployedDecisionRequirementsDefinitions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A JSON Object containing a property for each of the decision requirements definitions, which are successfully deployed with that deployment. The key is the decision requirements definition id, the value is a JSON Object corresponding to the decision requirements definition.")
  @JsonIgnore

  public Map<String, DecisionRequirementsDefinitionDto> getDeployedDecisionRequirementsDefinitions() {
        return deployedDecisionRequirementsDefinitions.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_DEPLOYED_DECISION_REQUIREMENTS_DEFINITIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Map<String, DecisionRequirementsDefinitionDto>> getDeployedDecisionRequirementsDefinitions_JsonNullable() {
    return deployedDecisionRequirementsDefinitions;
  }
  
  @JsonProperty(JSON_PROPERTY_DEPLOYED_DECISION_REQUIREMENTS_DEFINITIONS)
  public void setDeployedDecisionRequirementsDefinitions_JsonNullable(JsonNullable<Map<String, DecisionRequirementsDefinitionDto>> deployedDecisionRequirementsDefinitions) {
    this.deployedDecisionRequirementsDefinitions = deployedDecisionRequirementsDefinitions;
  }

  public void setDeployedDecisionRequirementsDefinitions(Map<String, DecisionRequirementsDefinitionDto> deployedDecisionRequirementsDefinitions) {
    this.deployedDecisionRequirementsDefinitions = JsonNullable.<Map<String, DecisionRequirementsDefinitionDto>>of(deployedDecisionRequirementsDefinitions);
  }


  public DeploymentWithDefinitionsDtoAllOf deployedCaseDefinitions(Map<String, CaseDefinitionDto> deployedCaseDefinitions) {
    this.deployedCaseDefinitions = JsonNullable.<Map<String, CaseDefinitionDto>>of(deployedCaseDefinitions);
    
    return this;
  }

  public DeploymentWithDefinitionsDtoAllOf putDeployedCaseDefinitionsItem(String key, CaseDefinitionDto deployedCaseDefinitionsItem) {
    if (this.deployedCaseDefinitions == null || !this.deployedCaseDefinitions.isPresent()) {
      this.deployedCaseDefinitions = JsonNullable.<Map<String, CaseDefinitionDto>>of(new HashMap<>());
    }
    try {
      this.deployedCaseDefinitions.get().put(key, deployedCaseDefinitionsItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

   /**
   * A JSON Object containing a property for each of the case definitions, which are successfully deployed with that deployment. The key is the case definition id, the value is a JSON Object corresponding to the case definition.
   * @return deployedCaseDefinitions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A JSON Object containing a property for each of the case definitions, which are successfully deployed with that deployment. The key is the case definition id, the value is a JSON Object corresponding to the case definition.")
  @JsonIgnore

  public Map<String, CaseDefinitionDto> getDeployedCaseDefinitions() {
        return deployedCaseDefinitions.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_DEPLOYED_CASE_DEFINITIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Map<String, CaseDefinitionDto>> getDeployedCaseDefinitions_JsonNullable() {
    return deployedCaseDefinitions;
  }
  
  @JsonProperty(JSON_PROPERTY_DEPLOYED_CASE_DEFINITIONS)
  public void setDeployedCaseDefinitions_JsonNullable(JsonNullable<Map<String, CaseDefinitionDto>> deployedCaseDefinitions) {
    this.deployedCaseDefinitions = deployedCaseDefinitions;
  }

  public void setDeployedCaseDefinitions(Map<String, CaseDefinitionDto> deployedCaseDefinitions) {
    this.deployedCaseDefinitions = JsonNullable.<Map<String, CaseDefinitionDto>>of(deployedCaseDefinitions);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeploymentWithDefinitionsDtoAllOf deploymentWithDefinitionsDtoAllOf = (DeploymentWithDefinitionsDtoAllOf) o;
    return Objects.equals(this.deployedProcessDefinitions, deploymentWithDefinitionsDtoAllOf.deployedProcessDefinitions) &&
        Objects.equals(this.deployedDecisionDefinitions, deploymentWithDefinitionsDtoAllOf.deployedDecisionDefinitions) &&
        Objects.equals(this.deployedDecisionRequirementsDefinitions, deploymentWithDefinitionsDtoAllOf.deployedDecisionRequirementsDefinitions) &&
        Objects.equals(this.deployedCaseDefinitions, deploymentWithDefinitionsDtoAllOf.deployedCaseDefinitions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deployedProcessDefinitions, deployedDecisionDefinitions, deployedDecisionRequirementsDefinitions, deployedCaseDefinitions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeploymentWithDefinitionsDtoAllOf {\n");
    sb.append("    deployedProcessDefinitions: ").append(toIndentedString(deployedProcessDefinitions)).append("\n");
    sb.append("    deployedDecisionDefinitions: ").append(toIndentedString(deployedDecisionDefinitions)).append("\n");
    sb.append("    deployedDecisionRequirementsDefinitions: ").append(toIndentedString(deployedDecisionRequirementsDefinitions)).append("\n");
    sb.append("    deployedCaseDefinitions: ").append(toIndentedString(deployedCaseDefinitions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

