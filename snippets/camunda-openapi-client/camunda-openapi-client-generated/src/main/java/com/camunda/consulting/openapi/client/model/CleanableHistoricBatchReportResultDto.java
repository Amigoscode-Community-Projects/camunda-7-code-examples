/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.16.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.camunda.consulting.openapi.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * CleanableHistoricBatchReportResultDto
 */
@JsonPropertyOrder({
  CleanableHistoricBatchReportResultDto.JSON_PROPERTY_BATCH_TYPE,
  CleanableHistoricBatchReportResultDto.JSON_PROPERTY_HISTORY_TIME_TO_LIVE,
  CleanableHistoricBatchReportResultDto.JSON_PROPERTY_FINISHED_BATCHES_COUNT,
  CleanableHistoricBatchReportResultDto.JSON_PROPERTY_CLEANABLE_BATCHES_COUNT
})
@JsonTypeName("CleanableHistoricBatchReportResultDto")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-10-13T17:49:51.183809+02:00[Europe/Berlin]")
public class CleanableHistoricBatchReportResultDto {
  public static final String JSON_PROPERTY_BATCH_TYPE = "batchType";
  private String batchType;

  public static final String JSON_PROPERTY_HISTORY_TIME_TO_LIVE = "historyTimeToLive";
  private Integer historyTimeToLive;

  public static final String JSON_PROPERTY_FINISHED_BATCHES_COUNT = "finishedBatchesCount";
  private Long finishedBatchesCount;

  public static final String JSON_PROPERTY_CLEANABLE_BATCHES_COUNT = "cleanableBatchesCount";
  private Long cleanableBatchesCount;


  public CleanableHistoricBatchReportResultDto batchType(String batchType) {
    
    this.batchType = batchType;
    return this;
  }

   /**
   * The type of the batch operation.
   * @return batchType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The type of the batch operation.")
  @JsonProperty(JSON_PROPERTY_BATCH_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getBatchType() {
    return batchType;
  }


  public void setBatchType(String batchType) {
    this.batchType = batchType;
  }


  public CleanableHistoricBatchReportResultDto historyTimeToLive(Integer historyTimeToLive) {
    
    this.historyTimeToLive = historyTimeToLive;
    return this;
  }

   /**
   * The history time to live of the batch operation.
   * @return historyTimeToLive
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The history time to live of the batch operation.")
  @JsonProperty(JSON_PROPERTY_HISTORY_TIME_TO_LIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getHistoryTimeToLive() {
    return historyTimeToLive;
  }


  public void setHistoryTimeToLive(Integer historyTimeToLive) {
    this.historyTimeToLive = historyTimeToLive;
  }


  public CleanableHistoricBatchReportResultDto finishedBatchesCount(Long finishedBatchesCount) {
    
    this.finishedBatchesCount = finishedBatchesCount;
    return this;
  }

   /**
   * The count of the finished batch operations.
   * @return finishedBatchesCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The count of the finished batch operations.")
  @JsonProperty(JSON_PROPERTY_FINISHED_BATCHES_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getFinishedBatchesCount() {
    return finishedBatchesCount;
  }


  public void setFinishedBatchesCount(Long finishedBatchesCount) {
    this.finishedBatchesCount = finishedBatchesCount;
  }


  public CleanableHistoricBatchReportResultDto cleanableBatchesCount(Long cleanableBatchesCount) {
    
    this.cleanableBatchesCount = cleanableBatchesCount;
    return this;
  }

   /**
   * The count of the cleanable historic batch operations, referring to history time to live.
   * @return cleanableBatchesCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The count of the cleanable historic batch operations, referring to history time to live.")
  @JsonProperty(JSON_PROPERTY_CLEANABLE_BATCHES_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getCleanableBatchesCount() {
    return cleanableBatchesCount;
  }


  public void setCleanableBatchesCount(Long cleanableBatchesCount) {
    this.cleanableBatchesCount = cleanableBatchesCount;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CleanableHistoricBatchReportResultDto cleanableHistoricBatchReportResultDto = (CleanableHistoricBatchReportResultDto) o;
    return Objects.equals(this.batchType, cleanableHistoricBatchReportResultDto.batchType) &&
        Objects.equals(this.historyTimeToLive, cleanableHistoricBatchReportResultDto.historyTimeToLive) &&
        Objects.equals(this.finishedBatchesCount, cleanableHistoricBatchReportResultDto.finishedBatchesCount) &&
        Objects.equals(this.cleanableBatchesCount, cleanableHistoricBatchReportResultDto.cleanableBatchesCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(batchType, historyTimeToLive, finishedBatchesCount, cleanableBatchesCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CleanableHistoricBatchReportResultDto {\n");
    sb.append("    batchType: ").append(toIndentedString(batchType)).append("\n");
    sb.append("    historyTimeToLive: ").append(toIndentedString(historyTimeToLive)).append("\n");
    sb.append("    finishedBatchesCount: ").append(toIndentedString(finishedBatchesCount)).append("\n");
    sb.append("    cleanableBatchesCount: ").append(toIndentedString(cleanableBatchesCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

