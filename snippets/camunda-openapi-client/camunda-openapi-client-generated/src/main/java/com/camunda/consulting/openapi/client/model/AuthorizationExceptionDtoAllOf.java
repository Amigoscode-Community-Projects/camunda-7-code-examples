/*
 * Camunda Platform REST API
 * OpenApi Spec for Camunda Platform REST API.
 *
 * The version of the OpenAPI document: 7.16.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.camunda.consulting.openapi.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.camunda.consulting.openapi.client.model.MissingAuthorizationDto;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * AuthorizationExceptionDtoAllOf
 */
@JsonPropertyOrder({
  AuthorizationExceptionDtoAllOf.JSON_PROPERTY_USER_ID,
  AuthorizationExceptionDtoAllOf.JSON_PROPERTY_MISSING_AUTHORIZATIONS
})
@JsonTypeName("AuthorizationExceptionDto_allOf")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-10-13T16:56:52.297572+02:00[Europe/Berlin]")
public class AuthorizationExceptionDtoAllOf {
  public static final String JSON_PROPERTY_USER_ID = "userId";
  private JsonNullable<String> userId = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_MISSING_AUTHORIZATIONS = "missingAuthorizations";
  private JsonNullable<List<MissingAuthorizationDto>> missingAuthorizations = JsonNullable.<List<MissingAuthorizationDto>>undefined();


  public AuthorizationExceptionDtoAllOf userId(String userId) {
    this.userId = JsonNullable.<String>of(userId);
    
    return this;
  }

   /**
   * The id of the user that does not have expected permissions
   * @return userId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The id of the user that does not have expected permissions")
  @JsonIgnore

  public String getUserId() {
        return userId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_USER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getUserId_JsonNullable() {
    return userId;
  }
  
  @JsonProperty(JSON_PROPERTY_USER_ID)
  public void setUserId_JsonNullable(JsonNullable<String> userId) {
    this.userId = userId;
  }

  public void setUserId(String userId) {
    this.userId = JsonNullable.<String>of(userId);
  }


  public AuthorizationExceptionDtoAllOf missingAuthorizations(List<MissingAuthorizationDto> missingAuthorizations) {
    this.missingAuthorizations = JsonNullable.<List<MissingAuthorizationDto>>of(missingAuthorizations);
    
    return this;
  }

  public AuthorizationExceptionDtoAllOf addMissingAuthorizationsItem(MissingAuthorizationDto missingAuthorizationsItem) {
    if (this.missingAuthorizations == null || !this.missingAuthorizations.isPresent()) {
      this.missingAuthorizations = JsonNullable.<List<MissingAuthorizationDto>>of(new ArrayList<>());
    }
    try {
      this.missingAuthorizations.get().add(missingAuthorizationsItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

   /**
   * Get missingAuthorizations
   * @return missingAuthorizations
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")
  @JsonIgnore

  public List<MissingAuthorizationDto> getMissingAuthorizations() {
        return missingAuthorizations.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MISSING_AUTHORIZATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<List<MissingAuthorizationDto>> getMissingAuthorizations_JsonNullable() {
    return missingAuthorizations;
  }
  
  @JsonProperty(JSON_PROPERTY_MISSING_AUTHORIZATIONS)
  public void setMissingAuthorizations_JsonNullable(JsonNullable<List<MissingAuthorizationDto>> missingAuthorizations) {
    this.missingAuthorizations = missingAuthorizations;
  }

  public void setMissingAuthorizations(List<MissingAuthorizationDto> missingAuthorizations) {
    this.missingAuthorizations = JsonNullable.<List<MissingAuthorizationDto>>of(missingAuthorizations);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AuthorizationExceptionDtoAllOf authorizationExceptionDtoAllOf = (AuthorizationExceptionDtoAllOf) o;
    return Objects.equals(this.userId, authorizationExceptionDtoAllOf.userId) &&
        Objects.equals(this.missingAuthorizations, authorizationExceptionDtoAllOf.missingAuthorizations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(userId, missingAuthorizations);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AuthorizationExceptionDtoAllOf {\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    missingAuthorizations: ").append(toIndentedString(missingAuthorizations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

